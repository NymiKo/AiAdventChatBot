package com.example.aiadventchatbot.ui

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.aiadventchatbot.domain.ChatPrompts
import com.example.aiadventchatbot.domain.ChatRepository
import com.example.aiadventchatbot.models.CommandResult
import com.example.aiadventchatbot.models.MessageInfo
import com.example.aiadventchatbot.models.Roles
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.booleanOrNull
import kotlinx.serialization.json.jsonObject
import kotlinx.serialization.json.jsonPrimitive
import java.io.File

class ChatViewModel(
    private val repository: ChatRepository,
) : ViewModel() {

    // State
    private val _messages = MutableStateFlow<List<MessageInfo>>(emptyList())
    val messages: StateFlow<List<MessageInfo>> = _messages.asStateFlow()

    private val _userInput = MutableStateFlow("")
    val userInput: StateFlow<String> = _userInput.asStateFlow()

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()

    // Constants
    private companion object {
        const val JAVA_HOME_PATH = "/Applications/Android Studio.app/Contents/jbr/Contents/Home"
        const val TOOL_CALL_START_PREFIX = "[TOOL_CALL_START]"
        const val AGENT_LOG_PREFIX = "ü§ñ [AGENT]"
    }

    fun initChat() {
        _messages.value = listOf(ChatPrompts.systemPrompt)
    }

    fun onUserInputChanged(newValue: String) {
        _userInput.update { newValue }
    }

    fun sendMessage() {
        if (_userInput.value.isBlank() || _isLoading.value) return

        viewModelScope.launch {
            _isLoading.value = true
            addMessage(MessageInfo(Roles.VISIBLE_USER, _userInput.value))

            try {
                val gptResponse = fetchAssistantResponse(MessageInfo(Roles.USER, _userInput.value))
                println("$AGENT_LOG_PREFIX GPT Response: $gptResponse")

                val normalizedResponse = if (isToolCallFormat(gptResponse)) {
                    convertToolCallToJson(gptResponse)
                } else gptResponse

                when {
                    isJsonCommand(normalizedResponse) -> handleMcpCommand(normalizedResponse)
                    else -> addMessage(MessageInfo(Roles.ASSISTANT, normalizedResponse))
                }
            } catch (e: Exception) {
                addMessage(MessageInfo(Roles.ASSISTANT, "–û—à–∏–±–∫–∞: ${e.message}"))
            } finally {
                _isLoading.value = false
                _userInput.update { "" }
            }
        }
    }

    // Private helpers
    private fun addMessage(message: MessageInfo) {
        _messages.value = _messages.value + message
    }

    private suspend fun fetchAssistantResponse(messageInfo: MessageInfo): String {
        return runCatching {
            repository.sendMessage(_messages.value + messageInfo)
        }.getOrElse { "–û—à–∏–±–∫–∞: ${it.message ?: "Unknown error"}" }
    }

    // Command handling
    private suspend fun handleMcpCommand(jsonResponse: String) {
        val command = Json.parseToJsonElement(jsonResponse).jsonObject
        val name = command["name"]?.jsonPrimitive?.content
            ?: throw IllegalArgumentException("Missing 'name' in tool command")
        val arguments = command["arguments"]?.jsonObject
            ?: throw IllegalArgumentException("Missing 'arguments' in tool command")

        when (name) {
            "execute_shell_command" -> handleShellCommand(arguments)
            "run_android_tests" -> handleAndroidTests(arguments)
            "generate_tests_for_file" -> handleGenerateTests(arguments)
            else -> addMessage(MessageInfo(Roles.ASSISTANT.role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $name"))
        }
    }

    private suspend fun handleShellCommand(arguments: JsonObject) {
        val commandText = arguments["command"]?.jsonPrimitive?.content
            ?: throw IllegalArgumentException("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'command'")
        val description = arguments["description"]?.jsonPrimitive?.content
            ?: throw IllegalArgumentException("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'description'")

        addMessage(
            MessageInfo(
                Roles.ASSISTANT.role,
                "üîß –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: $commandText\n–ü—Ä–∏—á–∏–Ω–∞: $description"
            )
        )

        val result = executeShellCommand(commandText)
        val formattedResult = formatCommandResult(result, isTest = false)
        addMessage(MessageInfo(Roles.ASSISTANT.role, formattedResult))
    }

    private suspend fun handleAndroidTests(arguments: JsonObject) {
        val projectPath = arguments["projectPath"]?.jsonPrimitive?.content
            ?: throw IllegalArgumentException("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'projectPath'")
        val testType = arguments["testType"]?.jsonPrimitive?.content
            ?: throw IllegalArgumentException("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'testType'")
        val moduleName = arguments["moduleName"]?.jsonPrimitive?.content
        val buildVariant = arguments["buildVariant"]?.jsonPrimitive?.content ?: "Debug"

        val moduleInfo = if (moduleName != null) " (–º–æ–¥—É–ª—å: $moduleName)" else ""
        addMessage(
            MessageInfo(
                Roles.ASSISTANT.role,
                "üöÄ –ó–∞–ø—É—Å–∫–∞—é $testType —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: $projectPath$moduleInfo –≤ —Ä–µ–∂–∏–º–µ $buildVariant..."
            )
        )

        val result = runAndroidTests(projectPath, testType, moduleName, buildVariant)
        val formattedResult = formatCommandResult(result, isTest = true)
        addMessage(MessageInfo(Roles.ASSISTANT.role, formattedResult))
    }

    private suspend fun handleGenerateTests(arguments: JsonObject) {
        val filePath = arguments["filePath"]?.jsonPrimitive?.content
            ?: throw IllegalArgumentException("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'filePath'")
        val testType = arguments["testType"]?.jsonPrimitive?.content ?: "unit"
        val autoRun = arguments["autoRun"]?.jsonPrimitive?.booleanOrNull ?: false

        val file = File(filePath)
        if (!file.exists() || !file.isFile) {
            addMessage(MessageInfo(Roles.ASSISTANT.role, "‚ùå –§–∞–π–ª '$filePath' –Ω–µ –Ω–∞–π–¥–µ–Ω"))
            return
        }

        val fileContent = file.readText()

        addMessage(
            MessageInfo(
                Roles.ASSISTANT.role,
                "üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è $testType —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞: $filePath..."
            )
        )

        // –ü—Ä–æ–º–ø—Ç –¥–ª—è LLM
        val prompt = """
        –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π $testType —Ç–µ—Å—Ç—ã –Ω–∞ Kotlin –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–¥–∞.
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
        1. –î–æ–±–∞–≤—å –ö–û–†–†–ï–ö–¢–ù–´–ô package –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
        2. –î–æ–±–∞–≤—å –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã, –≤–∫–ª—é—á–∞—è:
           - –ò–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: import com.example.Calculator)
           - –ò–º–ø–æ—Ä—Ç—ã JUnit (org.junit.Test, org.junit.Assert.*)
           - –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ —Ç–∏–ø–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ —Ç–µ—Å—Ç–∞—Ö
        3. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏ –æ–¥–∏–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∏–º–ø–æ—Ä—Ç
        
        –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ –µ—Å—Ç—å package –∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã.

        –ö–æ–¥:
        ```
        $fileContent
        ```
    """.trimIndent()

        val generatedTests = runCatching {
            repository.sendMessage(_messages.value + MessageInfo(Roles.USER, prompt))
        }.getOrElse { "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: ${it.message}" }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç
        val testFilePath: String
        try {
            testFilePath = getTestFilePath(filePath, testType)
            val testFile = File(testFilePath)

            testFile.parentFile?.mkdirs()
            testFile.writeText(generatedTests)

            addMessage(
                MessageInfo(
                    Roles.ASSISTANT.role,
                    "‚úÖ –¢–µ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: $testFilePath"
                )
            )
        } catch (e: Exception) {
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT.role,
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç—ã: ${e.message}"
                )
            )
            return
        }

        // –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω autoRun ‚Üí —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        if (autoRun) {
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT.role,
                    "üöÄ –ó–∞–ø—É—Å–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö $testType —Ç–µ—Å—Ç–æ–≤..."
                )
            )

            val projectRoot = File(filePath).walkUpToProjectRoot()
            val moduleName = detectModuleName(testFilePath, projectRoot)

            val result = runAndroidTests(
                projectPath = projectRoot.absolutePath,
                testType = testType,
                moduleName = moduleName,
                buildVariant = "Debug"
            )

            val formattedResult = formatCommandResult(result, isTest = true)
            addMessage(MessageInfo(Roles.ASSISTANT.role, formattedResult))
        }
    }

    private fun detectModuleName(testFilePath: String, projectRoot: File): String? {
        val relative = File(testFilePath).relativeTo(projectRoot).path
        return relative.split(File.separator).firstOrNull()
    }

    private fun getTestFilePath(sourceFilePath: String, testType: String): String {
        val file = File(sourceFilePath)
        val projectRoot = file.walkUpToProjectRoot() // –∏—â–µ–º build.gradle –≤–≤–µ—Ä—Ö –ø–æ –¥–µ—Ä–µ–≤—É

        val relativePath = file.relativeTo(projectRoot).path
            .removePrefix("src/main/java/")
            .removeSuffix(".kt") + "Test.kt"

        val testFolder = when (testType) {
            "unit" -> "src/test/java"
            "instrumented" -> "src/androidTest/java"
            else -> "src/test/java"
        }

        return File(projectRoot, "$testFolder/$relativePath").path
    }

    private fun File.walkUpToProjectRoot(): File {
        var current: File? = this
        while (current != null) {
            if (File(current, "build.gradle").exists() || File(
                    current,
                    "build.gradle.kts"
                ).exists()
            ) {
                return current
            }
            current = current.parentFile
        }
        throw IllegalStateException("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (build.gradle)")
    }


    // Shell command execution
    private fun executeShellCommand(
        command: String,
        workingDirectory: String? = null
    ): CommandResult {
        println("$AGENT_LOG_PREFIX –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: $command")
        workingDirectory?.let { println("$AGENT_LOG_PREFIX –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $it") }

        return try {
            val processBuilder = ProcessBuilder("bash", "-c", command)
                .directory(workingDirectory?.let { File(it) }
                    ?: File(System.getProperty("user.home")))

            setupJavaEnvironment(processBuilder)
            val process = processBuilder.start()

            val output = process.inputStream.bufferedReader().readText().trim()
            val error = process.errorStream.bufferedReader().readText().trim()
            val exitCode = process.waitFor()

            CommandResult(exitCode, output, error)
        } catch (e: Exception) {
            CommandResult(-1, "", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: ${e.message}")
        }
    }

    private fun setupJavaEnvironment(processBuilder: ProcessBuilder) {
        val env = processBuilder.environment()
        env["JAVA_HOME"] = JAVA_HOME_PATH
        env["PATH"] = "$JAVA_HOME_PATH/bin:${env["PATH"] ?: ""}"
        println("$AGENT_LOG_PREFIX JAVA_HOME —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $JAVA_HOME_PATH")
    }

    // Android tests
    private suspend fun runAndroidTests(
        projectPath: String,
        testType: String,
        moduleName: String? = null,
        buildVariant: String = "Debug"
    ): CommandResult {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        val validationError = validateAndroidProject(projectPath)
        if (validationError != null) return validationError

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
        val variant = buildVariant.lowercase()
        val modulePrefix = moduleName?.let { "$it:" } ?: ""
        val gradleCommand = buildGradleCommand(testType, modulePrefix, variant)

        logTestExecution(testType, projectPath, moduleName, buildVariant, gradleCommand)
        return executeShellCommand(gradleCommand, projectPath)
    }

    private fun validateAndroidProject(projectPath: String): CommandResult? {
        val projectDir = File(projectPath)
        if (!projectDir.exists() || !projectDir.isDirectory) {
            return CommandResult(-1, "", "–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ '$projectPath' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        }

        val buildGradleExists = File(projectPath, "build.gradle").exists() ||
                File(projectPath, "build.gradle.kts").exists()
        if (!buildGradleExists) {
            return CommandResult(
                -1,
                "",
                "–û—à–∏–±–∫–∞: –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '$projectPath' –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª build.gradle"
            )
        }

        val gradlewFile = File(projectPath, "gradlew")
        if (!gradlewFile.exists()) {
            return CommandResult(
                -1,
                "",
                "–û—à–∏–±–∫–∞: –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '$projectPath' –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª gradlew"
            )
        }

        val javaExecutable = File(JAVA_HOME_PATH, "bin/java")
        if (!javaExecutable.exists()) {
            return CommandResult(-1, "", "–û—à–∏–±–∫–∞: Java –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ $JAVA_HOME_PATH")
        }

        gradlewFile.setExecutable(true)
        println("$AGENT_LOG_PREFIX Java –Ω–∞–π–¥–µ–Ω–∞: $javaExecutable")
        return null
    }

    private fun buildGradleCommand(
        testType: String,
        modulePrefix: String,
        variant: String
    ): String {
        return when (testType) {
            "unit" -> "./gradlew ${modulePrefix}test${variant}UnitTest --quiet"
            "instrumented" -> "./gradlew ${modulePrefix}connected${variant}AndroidTest --quiet"
            else -> throw IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: $testType")
        }
    }

    private fun logTestExecution(
        testType: String,
        projectPath: String,
        moduleName: String?,
        buildVariant: String,
        command: String
    ) {
        println("$AGENT_LOG_PREFIX –ó–∞–ø—É—Å–∫–∞—é $testType —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: $projectPath")
        moduleName?.let { println("$AGENT_LOG_PREFIX –ú–æ–¥—É–ª—å: $it") }
        println("$AGENT_LOG_PREFIX –í–∞—Ä–∏–∞–Ω—Ç —Å–±–æ—Ä–∫–∏: $buildVariant")
        println("$AGENT_LOG_PREFIX –ö–æ–º–∞–Ω–¥–∞: $command")
    }

    // Response parsing
    private fun isJsonCommand(response: String): Boolean {
        return try {
            Json.parseToJsonElement(response) is JsonObject
        } catch (e: Exception) {
            false
        }
    }

    private fun isToolCallFormat(response: String): Boolean {
        return response.trim().startsWith(TOOL_CALL_START_PREFIX)
    }

    private fun convertToolCallToJson(response: String): String {
        val lines = response.trim().lines().filter { it.isNotBlank() }
        if (lines.isEmpty()) return response

        val name = lines.first().removePrefix(TOOL_CALL_START_PREFIX).trim()
        val argsMap = mutableMapOf<String, String>()

        lines.drop(1).forEach { line ->
            val idx = line.indexOf('=')
            if (idx > 0) {
                val key = line.substring(0, idx).trim()
                val value = line.substring(idx + 1).trim()
                if (key.isNotEmpty()) argsMap[key] = value
            }
        }

        val argsJsonPairs = argsMap.entries.joinToString(",") { (k, v) ->
            "\"$k\":\"${v.replace("\\", "\\\\").replace("\"", "\\\"")}\""
        }

        return "{\"name\":\"$name\",\"arguments\":{$argsJsonPairs}}"
    }

    // Result formatting
    private fun formatCommandResult(result: CommandResult, isTest: Boolean): String {
        return when {
            result.exitCode == 0 -> formatSuccessResult(result, isTest)
            result.exitCode > 0 -> formatWarningResult(result, isTest)
            else -> formatErrorResult(result, isTest)
        }
    }

    private fun formatSuccessResult(result: CommandResult, isTest: Boolean): String {
        val title =
            if (isTest) "‚úÖ **–¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!**" else "‚úÖ **–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**"
        val summary = if (isTest) extractTestSummary(result.stdout) else result.stdout.trim()

        return if (summary.isNotEmpty()) {
            "$title\n\n$summary"
        } else {
            "$title (–±–µ–∑ –≤—ã–≤–æ–¥–∞)"
        }
    }

    private fun formatWarningResult(result: CommandResult, isTest: Boolean): String {
        val title =
            if (isTest) "‚ö†Ô∏è **–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏**" else "‚ö†Ô∏è **–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏** (–∫–æ–¥: ${result.exitCode})"
        val errorInfo = analyzeErrors(result.stdout, result.stderr, isTest)
        return "$title\n\n$errorInfo"
    }

    private fun formatErrorResult(result: CommandResult, isTest: Boolean): String {
        val title =
            if (isTest) "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤**" else "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã** (–∫–æ–¥: ${result.exitCode})"
        val errorInfo = analyzeErrors(result.stdout, result.stderr, isTest)
        return "$title\n\n$errorInfo"
    }

    private fun extractTestSummary(output: String): String {
        val testKeywords =
            listOf("BUILD SUCCESSFUL", "Tests run:", "BUILD FAILED", "Test execution finished")
        val testResults = output.lines().filter { line ->
            testKeywords.any { keyword -> line.contains(keyword) }
        }

        return if (testResults.isNotEmpty()) {
            testResults.joinToString("\n")
        } else {
            "–¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –±–µ–∑ –æ—à–∏–±–æ–∫. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: 0"
        }
    }

    private fun analyzeErrors(output: String, error: String, isTest: Boolean): String {
        val allText = "$output\n$error"

        val commonErrors = mapOf(
            "Unable to locate a Java Runtime" to ("–ù–µ –Ω–∞–π–¥–µ–Ω Java Runtime" to "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Android Studio —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ JAVA_HOME –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"),
            "BUILD FAILED" to ("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞" to "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–¥–∞, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gradle"),
            "Permission denied" to ("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ" to "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"),
            "Connection refused" to ("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏" to "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"),
            "command not found" to ("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" to "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø–∞–∫–µ—Ç"),
            "No such file or directory" to ("–§–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" to "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        )

        if (isTest && allText.contains("No tests found")) {
            return "**–ü—Ä–æ–±–ª–µ–º–∞:** –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n**–†–µ—à–µ–Ω–∏–µ:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å—Ç—å —Ñ–∞–π–ª—ã —Ç–µ—Å—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ test/"
        }

        for ((errorPattern, solution) in commonErrors) {
            if (allText.contains(errorPattern)) {
                return "**–ü—Ä–æ–±–ª–µ–º–∞:** ${solution.first}\n**–†–µ—à–µ–Ω–∏–µ:** ${solution.second}"
            }
        }

        val errorLines = error.lines().filter { it.isNotBlank() && it.length < 150 }
        return if (errorLines.isNotEmpty()) {
            "**–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:**\n${errorLines.take(3).joinToString("\n")}"
        } else {
            "**–ö–æ–¥ –æ—à–∏–±–∫–∏:** –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
        }
    }
}