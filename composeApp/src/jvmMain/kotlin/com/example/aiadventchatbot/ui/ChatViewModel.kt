package com.example.aiadventchatbot.ui

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.aiadventchatbot.domain.ChatPrompts
import com.example.aiadventchatbot.domain.ChatRepository
import com.example.aiadventchatbot.models.CommandResult
import com.example.aiadventchatbot.models.MessageInfo
import com.example.aiadventchatbot.models.Roles
import com.example.aiadventchatbot.utils.RuStoreTokenGenerator
import com.example.aiadventchatbot.utils.getSecret
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.contentOrNull
import kotlinx.serialization.json.jsonArray
import kotlinx.serialization.json.jsonObject
import kotlinx.serialization.json.jsonPrimitive
import java.io.File
import java.util.Locale

class ChatViewModel(
    private val repository: ChatRepository,
) : ViewModel() {

    // State
    private val _messages = MutableStateFlow<List<MessageInfo>>(emptyList())
    val messages: StateFlow<List<MessageInfo>> = _messages.asStateFlow()

    private val _userInput = MutableStateFlow("")
    val userInput: StateFlow<String> = _userInput.asStateFlow()

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    private val _publishProgress = MutableStateFlow<String?>(null)
    val publishProgress: StateFlow<String?> = _publishProgress.asStateFlow()

    // —Å–∫—Ä—ã—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è (—Ç–µ—Ö–ª–æ–≥–∏ –¥–ª—è LLM, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ UI)
    private val hiddenHistory = mutableListOf<MessageInfo>()

    // Constants
    private companion object {
        const val JAVA_HOME_PATH = "/Applications/Android Studio.app/Contents/jbr/Contents/Home"
        const val TOOL_CALL_START_PREFIX = "[TOOL_CALL_START]"
        const val AGENT_LOG_PREFIX = "ü§ñ [AGENT]"
    }

    init {
        initChat()
    }

    fun initChat() {
        _messages.value = listOf(ChatPrompts.systemPrompt)
    }

    fun onUserInputChanged(newValue: String) {
        _userInput.update { newValue }
    }

    fun sendMessage() {

        viewModelScope.launch {
            _isLoading.value = true
            val userText = _userInput.value
            addMessage(MessageInfo(Roles.VISIBLE_USER, userText))

            try {
                sendMessagesLLM(MessageInfo(Roles.USER, userText))
            } catch (e: Exception) {
                addMessage(MessageInfo(Roles.ASSISTANT, "–û—à–∏–±–∫–∞: ${e.message}"))
            } finally {
                _isLoading.value = false
                _userInput.update { "" }
            }
        }
    }

    private fun sendMessagesLLM(messageInfo: MessageInfo) = viewModelScope.launch {
        val gptResponse = fetchAssistantResponse(messageInfo)
        println("$AGENT_LOG_PREFIX GPT Response: $gptResponse")

        // –∏–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π JSON –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        val (humanPart, jsonPart) = extractFirstJsonObject(gptResponse)
        if (!humanPart.isNullOrBlank()) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—É—é —á–∞—Å—Ç—å (–æ–¥–∏–Ω —Ä–∞–∑)
            addMessage(MessageInfo(Roles.ASSISTANT, humanPart))
        }
        if (jsonPart != null) {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é JSON-–∫–æ–º–∞–Ω–¥—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
            handleMcpCommand(jsonPart)
            return@launch
        }

        // –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ‚Äî —Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        if (isToolCallFormat(gptResponse)) {
            val json = convertToolCallToJson(gptResponse)
            handleMcpCommand(json)
        } else if (isJsonCommand(gptResponse)) {
            handleMcpCommand(gptResponse)
        } else {
            addMessage(MessageInfo(Roles.ASSISTANT, gptResponse))
        }
    }

    // Private helpers
    private fun addMessage(message: MessageInfo) {
        // –ø—Ä–æ—Å—Ç–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–æ–≤–Ω–æ —Ç–∞–∫–æ–µ –∂–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        val last = _messages.value.lastOrNull()
        if (last?.role == message.role && last.content == message.content) return
        _messages.value = _messages.value + message
    }

    private suspend fun fetchAssistantResponse(messageInfo: MessageInfo): String {
        return runCatching {
            // –ü–µ—Ä–µ–¥–∞—ë–º –≤–∏–¥–∏–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è + —Å–∫—Ä—ã—Ç—ã–µ –ª–æ–≥–∏ + –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            repository.sendMessage(_messages.value + hiddenHistory + messageInfo)
        }.getOrElse { "–û—à–∏–±–∫–∞: ${it.message ?: "Unknown error"}" }
    }

    // Command handling: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç JSON (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç) –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ
    private suspend fun handleMcpCommand(jsonResponse: String) {
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        println("$AGENT_LOG_PREFIX handleMcpCommand RAW RESPONSE:\n$jsonResponse")
        hiddenHistory.add(MessageInfo(Roles.ASSISTANT, "**[RAW_TOOL_RESPONSE]** $jsonResponse"))

        val commandObj = try {
            Json.parseToJsonElement(jsonResponse).jsonObject
        } catch (e: Exception) {
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∫–æ–º–∞–Ω–¥—ã: ${e.message}"
                )
            )
            hiddenHistory.add(MessageInfo(Roles.ASSISTANT, "**[PARSE_ERROR]** ${e.message}"))
            return
        }

        // –ë–µ—Ä—ë–º name (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º)
        val rawName = commandObj["name"]?.jsonPrimitive?.contentOrNull
        if (rawName.isNullOrBlank()) {
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚ùó –í –∫–æ–º–∞–Ω–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'name'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON."
                )
            )
            hiddenHistory.add(MessageInfo(Roles.ASSISTANT, "**[MISSING_NAME]** $jsonResponse"))
            return
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è: –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, –¥–µ—Ñ–∏—Å—ã -> –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è, –ø—Ä–æ–±–µ–ª—ã -> –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
        val name = rawName.lowercase(Locale.getDefault())
            .replace("-", "_")
            .replace(" ", "_")

        println("$AGENT_LOG_PREFIX Parsed tool name: $rawName -> normalized: $name")

        // –ë–µ—Ä—ë–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç (–Ω–µ –∫–∏–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
        val arguments = commandObj["arguments"]?.jsonObject ?: JsonObject(emptyMap())

        // –†–æ—É—Ç–∏–Ω–≥ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
        when (name) {
            "execute_shell_command", "execute_shell", "shell_command" -> handleShellCommand(
                arguments
            )

            "run_android_tests", "run_tests", "run-android-tests" -> handleAndroidTests(arguments)
            "publish_app", "publish-app", "publish" -> handlePublishApp(arguments)
            "publish_to_rustore", "publish-to-rustore", "publish_rustore" -> handlePublishToRustore(
                arguments
            )

            "publish_version", "publish-version", "publishversion" -> handlePublishVersion(arguments)
            "generate_rustore_token", "generate-rustore-token" -> handleGenerateRuStoreToken(
                arguments
            )

            "test_rustore_api", "test-rustore-api" -> handleTestRuStoreApi(arguments)
            else -> {
                val msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $rawName (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: $name)"
                addMessage(MessageInfo(Roles.ASSISTANT, msg))
                hiddenHistory.add(
                    MessageInfo(
                        Roles.ASSISTANT,
                        "**[UNKNOWN_TOOL_NAME]** name=$rawName normalized=$name json=$jsonResponse"
                    )
                )
            }
        }
    }


    private suspend fun handlePublishVersion(arguments: JsonObject) {
        val packageName = arguments["packageName"]?.jsonPrimitive?.content
            ?: run {
                addMessage(MessageInfo(Roles.ASSISTANT, "‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'packageName' –≤ –∫–æ–º–∞–Ω–¥–µ."))
                return
            }

        val publicToken = arguments["publicToken"]?.jsonPrimitive?.content

        if (publicToken.isNullOrBlank()) {
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω Public-Token. –ü–µ—Ä–µ–¥–∞–π—Ç–µ 'publicToken' –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ RUSTORE_PUBLIC_TOKEN –≤ .env"
                )
            )
            return
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        fun esc(s: String): String = s.replace("\\", "\\\\").replace("\"", "\\\"")

        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        val parts = mutableListOf<String>()

        arguments["appName"]?.jsonPrimitive?.content?.let { parts.add("\"appName\":\"${esc(it)}\"") }
        arguments["appType"]?.jsonPrimitive?.content?.let { parts.add("\"appType\":\"${esc(it)}\"") }

        // categories: –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤ JsonArray –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–ø—è—Ç—ã–º–∏
        val categoriesJson = when (val node = arguments["categories"]) {
            null -> null
            else -> {
                try {
                    val arr = node.jsonArray.map { "\"${esc(it.jsonPrimitive.content)}\"" }
                    "[${arr.joinToString(",")}]"
                } catch (e: Exception) {
                    // fallback: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å—Ç—Ä–æ–∫–æ–π "news,education"
                    val raw = node.jsonPrimitive.content
                    val list =
                        raw.split(",").map { "\"${esc(it.trim())}\"" }.filter { it.isNotBlank() }
                    "[${list.joinToString(",")}]"
                }
            }
        }
        categoriesJson?.let { parts.add("\"categories\":$it") }

        arguments["ageLegal"]?.jsonPrimitive?.content?.let { parts.add("\"ageLegal\":\"${esc(it)}\"") }
        arguments["shortDescription"]?.jsonPrimitive?.content?.let {
            parts.add(
                "\"shortDescription\":\"${
                    esc(
                        it
                    )
                }\""
            )
        }
        arguments["fullDescription"]?.jsonPrimitive?.content?.let {
            parts.add(
                "\"fullDescription\":\"${
                    esc(
                        it
                    )
                }\""
            )
        }
        arguments["whatsNew"]?.jsonPrimitive?.content?.let { parts.add("\"whatsNew\":\"${esc(it)}\"") }
        arguments["moderInfo"]?.jsonPrimitive?.content?.let { parts.add("\"moderInfo\":\"${esc(it)}\"") }

        // priceValue –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º
        arguments["priceValue"]?.let {
            try {
                val num = it.jsonPrimitive.content
                // –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –≤ —á–∏—Å–ª–æ/–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                parts.add("\"priceValue\":$num")
            } catch (e: Exception) {
                // –µ—Å–ª–∏ —á—Ç–æ ‚Äî –¥–æ–±–∞–≤–∏–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                parts.add("\"priceValue\":\"${esc(it.jsonPrimitive.content)}\"")
            }
        }

        // seoTagIds ‚Äî –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª
        val seoJson = when (val node = arguments["seoTagIds"]) {
            null -> null
            else -> {
                try {
                    val arr = node.jsonArray.map { it.jsonPrimitive.content }
                    "[" + arr.joinToString(",") + "]"
                } catch (e: Exception) {
                    // fallback: —Å—Ç—Ä–æ–∫–∞ "100,102"
                    val raw = node.jsonPrimitive.content
                    val list = raw.split(",").map { it.trim() }.filter { it.isNotBlank() }
                    "[" + list.joinToString(",") + "]"
                }
            }
        }
        seoJson?.let { parts.add("\"seoTagIds\":$it") }

        arguments["publishType"]?.jsonPrimitive?.content?.let {
            parts.add(
                "\"publishType\":\"${
                    esc(
                        it
                    )
                }\""
            )
        }
        arguments["publishDateTime"]?.jsonPrimitive?.content?.let {
            parts.add(
                "\"publishDateTime\":\"${
                    esc(
                        it
                    )
                }\""
            )
        }

        // partialValue ‚Äî —á–∏—Å–ª–æ/—Å—Ç—Ä–æ–∫–∞
        arguments["partialValue"]?.let {
            try {
                val raw = it.jsonPrimitive.content
                parts.add(
                    "\"partialValue\":${
                        raw.replace(
                            "%",
                            ""
                        )
                    }"
                ) // –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ "5%" ‚Äî —É–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            } catch (e: Exception) {
                // –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
                parts.add("\"partialValue\":\"${esc(it.jsonPrimitive.content)}\"")
            }
        }

        val body = if (parts.isEmpty()) {
            "{}"
        } else {
            "{${parts.joinToString(",")}}"
        }

        addMessage(
            MessageInfo(
                Roles.ASSISTANT,
                "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–∏ –¥–ª—è $packageName..."
            )
        )
        // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: —Å–∫—Ä—ã—Ç—ã–π –ª–æ–≥ —Ç–µ–ª–∞
        println("$AGENT_LOG_PREFIX –¢–ï–õ–û –ß–ï–†–ù–û–í–ò–ö–ê $body")

        val curlCommand = """
        curl --location --request POST "https://public-api.rustore.ru/public/v1/application/${packageName}/version" \
        --header "Content-Type: application/json" \
        --header "Public-Token: $publicToken" \
        --data-raw '${body}'
    """.trimIndent()
        addMessage(
            MessageInfo(
                Roles.ASSISTANT,
                "‚úÖ –í–æ—Ç –ø–æ–ª—è –≤–∞—à–µ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: $body"
            )
        )
        _publishProgress.value = null

        val result = executeShellCommand(curlCommand)
        hiddenHistory.add(
            MessageInfo(
                Roles.ASSISTANT,
                "**[RUSTORE_VERSION_RESPONSE]** exit=${result.exitCode}\n${result.stdout}\n${result.stderr}"
            )
        )

        if (result.exitCode == 0) {
            // –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ —ç—Ç–æ JSON —Å id/version ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤)
            val visible =
                if (result.stdout.length <= 300) result.stdout else result.stdout.take(300) + "..."
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚úÖ –í–æ—Ç –ø–æ–ª—è –≤–∞—à–µ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: $body"
                )
            )
            _publishProgress.value = null
        } else {
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ hidden logs (–º–æ–¥–µ–ª—å –≤–∏–¥–∏—Ç –¥–µ—Ç–∞–ª–∏)."
                )
            )
            _publishProgress.value = null
        }
    }

    private suspend fun handleShellCommand(arguments: JsonObject) {
        val commandText = arguments["command"]?.jsonPrimitive?.content
            ?: throw IllegalArgumentException("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'command'")
        val description = arguments["description"]?.jsonPrimitive?.content ?: ""

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (description.isNotBlank()) {
            addMessage(MessageInfo(Roles.ASSISTANT, description))
        } else {
            addMessage(MessageInfo(Roles.ASSISTANT, "–í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É..."))
        }

        val result = executeShellCommand(commandText)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –≤ hiddenHistory (—á—Ç–æ–±—ã LLM –≤–∏–¥–µ–ª –¥–µ—Ç–∞–ª–∏)
        val full =
            "**[TECH] Command:** $commandText\n**[TECH] exit=${result.exitCode}**\nSTDOUT:\n${result.stdout}\nSTDERR:\n${result.stderr}"
        hiddenHistory.add(MessageInfo(Roles.ASSISTANT, full))

        // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∏–π —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å
        val userMessage = summarizeForUser(result, isTest = false)
        addMessage(MessageInfo(Roles.ASSISTANT, userMessage))
    }

    private suspend fun handleAndroidTests(arguments: JsonObject) {
        val projectPath = arguments["projectPath"]?.jsonPrimitive?.content
            ?: throw IllegalArgumentException("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'projectPath'")
        val testType = arguments["testType"]?.jsonPrimitive?.content
            ?: throw IllegalArgumentException("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'testType'")
        val moduleName = arguments["moduleName"]?.jsonPrimitive?.content
        val buildVariant = arguments["buildVariant"]?.jsonPrimitive?.content ?: "Debug"

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
        val moduleInfo = if (moduleName != null) " –¥–ª—è –º–æ–¥—É–ª—è $moduleName" else ""
        addMessage(MessageInfo(Roles.ASSISTANT, "–ó–∞–ø—É—Å–∫–∞—é $testType —Ç–µ—Å—Ç—ã$moduleInfo..."))

        val result = runAndroidTests(projectPath, testType, moduleName, buildVariant)

        // –°–∫—Ä—ã—Ç–æ: –ø–æ–ª–Ω—ã–π –ª–æ–≥ –¥–æ–±–∞–≤–ª—è–µ–º –≤ hiddenHistory (LLM —É–≤–∏–¥–∏—Ç)
        val full =
            "**[TEST_RESULT] type=$testType module=$moduleName variant=$buildVariant exit=${result.exitCode}**\n${result.stdout}\n${result.stderr}"
        hiddenHistory.add(MessageInfo(Roles.ASSISTANT, full))

        // visible: —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å
        val userMsg = summarizeForUser(result, isTest = true)
        addMessage(MessageInfo(Roles.ASSISTANT, userMsg))
    }

    /**
     * publish_app: —Å–æ–±–∏—Ä–∞–µ—Ç/–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç/–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç.
     * –í–ê–ñ–ù–û: –ù–ï –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π run_android_tests,
     * –∫–æ—Ç–æ—Ä—É—é LLM –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ–¥ publish_app, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
     */
    private suspend fun handlePublishApp(arguments: JsonObject) {
        // —Å–Ω–∞—á–∞–ª–∞ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —á–∏—Ç–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–Ω–µ –∫–∏–¥–∞–µ–º)
        val projectPath = arguments["projectPath"]?.jsonPrimitive?.content
            ?: run {
                addMessage(
                    MessageInfo(
                        Roles.ASSISTANT,
                        "‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'projectPath' –≤ –∫–æ–º–∞–Ω–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞."
                    )
                )
                return
            }

        val moduleName = arguments["moduleName"]?.jsonPrimitive?.content ?: "app"
        val buildVariant = arguments["buildVariant"]?.jsonPrimitive?.content ?: "Release"
        val artifactType = arguments["artifactType"]?.jsonPrimitive?.content ?: "apk"

        // credentials: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–æ—Ç–æ–º –∏–∑ env
        val keystorePath = arguments["keystorePath"]?.jsonPrimitive?.content
            ?: getSecret("KEYSTORE_PATH")
        val keystorePassword = arguments["keystorePassword"]?.jsonPrimitive?.content
            ?: getSecret("KEYSTORE_PASSWORD")
        val keyAlias = arguments["keyAlias"]?.jsonPrimitive?.content
            ?: getSecret("KEY_ALIAS")
        val keyPassword = arguments["keyPassword"]?.jsonPrimitive?.content
            ?: getSecret("KEY_PASSWORD")
        val rustoreToken = arguments["rustoreToken"]?.jsonPrimitive?.content
            ?: getSecret("RUSTORE_TOKEN")
        val apksignerPathArg = arguments["apksignerPath"]?.jsonPrimitive?.content

        // –°–ø–∏—Å–æ–∫, –∫–∞–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
        val missing = mutableListOf<String>()
        if (keystorePath.isNullOrBlank()) missing.add("keystorePath")
        if (keystorePassword.isNullOrBlank()) missing.add("keystorePassword")
        if (keyAlias.isNullOrBlank()) missing.add("keyAlias")
        if (keyPassword.isNullOrBlank()) missing.add("keyPassword")
        if (rustoreToken.isNullOrBlank()) missing.add("rustoreToken")

        if (missing.isNotEmpty()) {
            // –ü—Ä–æ—Å–∏–º –º–æ–¥–µ–ª—å/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
            val list = missing.joinToString(", ")
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚ùó –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: $list. \n\n–î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:\n1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –≤ –ø–∞–ø–∫–µ composeApp\n2. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: KEYSTORE_PATH, KEYSTORE_PASSWORD, KEY_ALIAS, KEY_PASSWORD, RUSTORE_TOKEN\n3. –ò–ª–∏ –ø—Ä–∏—à–ª–∏ JSON-–∫–æ–º–∞–Ω–¥—É publish_app —Å —ç—Ç–∏–º–∏ –ø–æ–ª—è–º–∏\n\n–ü—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞:\nKEYSTORE_PATH=/path/to/keystore.jks\nKEYSTORE_PASSWORD=your_password\nKEY_ALIAS=your_alias\nKEY_PASSWORD=your_key_password\nRUSTORE_TOKEN=your_token"
                )
            )
            return
        }

        // –¥–∞–ª—å—à–µ –∏–¥—ë—Ç –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∫–∏/–ø–æ–¥–ø–∏—Å–∏/–∑–∞–≥—Ä—É–∑–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
        addMessage(MessageInfo(Roles.ASSISTANT, "–°–æ–±–∏—Ä–∞—é —Ä–µ–ª–∏–∑–Ω—É—é –≤–µ—Ä—Å–∏—é..."))

        val modulePrefix = if (moduleName.isNotBlank()) "$moduleName:" else ""
        val assembleTask = "assemble${buildVariant.replaceFirstChar { it.uppercase() }}"
        val gradleCommand = "./gradlew ${modulePrefix}$assembleTask --quiet"
        val buildResult = executeShellCommand(gradleCommand, projectPath)

        // —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ª–æ–≥, –¥–æ–±–∞–≤–ª—è–µ–º –≤ hiddenHistory
        hiddenHistory.add(
            MessageInfo(
                Roles.ASSISTANT,
                "**[BUILD]** cmd=$gradleCommand\nexit=${buildResult.exitCode}\n${buildResult.stdout}\n${buildResult.stderr}"
            )
        )

        if (buildResult.exitCode != 0) {
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ —Ä–µ–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ (–¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –º–æ–¥–µ–ª–∏)."
                )
            )
            return
        }
        addMessage(MessageInfo(Roles.ASSISTANT, "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."))

        val unsignedArtifact =
            findUnsignedArtifact(projectPath, moduleName, buildVariant, artifactType)
        if (unsignedArtifact == null) {
            addMessage(MessageInfo(Roles.ASSISTANT, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏."))
            return
        }

        addMessage(MessageInfo(Roles.ASSISTANT, "–ü–æ–¥–ø–∏—Å—ã–≤–∞—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç..."))

        val signResult = signArtifact(
            unsignedArtifact,
            keystorePath!!,
            keystorePassword!!,
            keyAlias!!,
            keyPassword!!,
            projectPath
        )
        val signedFile = File(
            unsignedArtifact.parentFile,
            unsignedArtifact.name.replace(".aab", "-signed.aab").replace(".apk", "-signed.apk")
        )

        // —Å–∫—Ä—ã—Ç–æ: –ø–æ–ª–Ω—ã–µ –ª–æ–≥–∏ –ø–æ–¥–ø–∏—Å–∏
        hiddenHistory.add(
            MessageInfo(
                Roles.ASSISTANT,
                "**[SIGN]** exit=${signResult.exitCode}\n${signResult.stdout}\n${signResult.stderr}"
            )
        )

        if (signResult.exitCode != 0) {
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å –∫–ª—é—á–∏/–ø–∞—Ä–æ–ª–∏."
                )
            )
            return
        }
        addMessage(MessageInfo(Roles.ASSISTANT, "‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ–¥–ø–∏—Å–∞–Ω."))

        val artifactToUpload = if (signedFile.exists()) signedFile else unsignedArtifact

        addMessage(MessageInfo(Roles.ASSISTANT, "–ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ RuStore..."))

        val uploadCommand = """
            curl -s -X POST "https://public-api.rustore.ru/v1/application/upload" \
            -H "Authorization: Bearer $rustoreToken" \
            -F "file=@${artifactToUpload.absolutePath}"
        """.trimIndent()

        val uploadResult = executeShellCommand(uploadCommand, projectPath)

        // —Å–∫—Ä—ã—Ç–æ: –ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        hiddenHistory.add(
            MessageInfo(
                Roles.ASSISTANT,
                "**[UPLOAD]** exit=${uploadResult.exitCode}\n${uploadResult.stdout}\n${uploadResult.stderr}"
            )
        )

        if (uploadResult.exitCode == 0) {
            addMessage(MessageInfo(Roles.ASSISTANT, "üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ RuStore."))
        } else {
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ RuStore. –ü—Ä–æ–≤–µ—Ä—å –¥–µ—Ç–∞–ª–∏ (–º–æ–¥–µ–ª—å –∏—Ö –≤–∏–¥–∏—Ç)."
                )
            )
        }
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç (apk/aab) –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö outputs
    private fun findUnsignedArtifact(
        projectPath: String,
        moduleName: String,
        buildVariant: String,
        artifactType: String
    ): File? {
        val moduleDir =
            if (moduleName.isBlank()) File(projectPath) else File(projectPath, moduleName)
        val outputsDir = File(moduleDir, "build/outputs")
        if (!outputsDir.exists()) return null

        val variantLower = buildVariant.lowercase()
        val candidates = outputsDir.walkTopDown().filter { f ->
            f.isFile && !f.name.contains("-signed") && when (artifactType.lowercase()) {
                "aab", "bundle" -> f.extension == "aab" || f.extension == "bundle"
                else -> f.extension == "apk"
            } && f.name.lowercase().contains(variantLower)
        }.toList()

        return candidates.firstOrNull() ?: outputsDir.walkTopDown().filter { f ->
            f.isFile && !f.name.contains("-signed") && when (artifactType.lowercase()) {
                "aab", "bundle" -> f.extension == "aab" || f.extension == "bundle"
                else -> f.extension == "apk"
            }
        }.firstOrNull()
    }

    // –ò—â–µ–º apksigner –≤ ANDROID_SDK_ROOT/build-tools/*/apksigner
    private fun findApksignerInAndroidSdk(): String? {
        val androidHome =
            System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT") ?: return null
        val buildTools = File(androidHome, "build-tools")
        if (!buildTools.exists() || !buildTools.isDirectory) return null

        val candidates = buildTools.listFiles()?.sortedByDescending { it.name } ?: return null
        for (dir in candidates) {
            val apksigner = File(dir, "apksigner")
            val apksignerExe = File(dir, "apksigner.exe")
            if (apksigner.exists() && apksigner.canExecute()) return apksigner.absolutePath
            if (apksignerExe.exists() && apksignerExe.canExecute()) return apksignerExe.absolutePath
        }
        return null
    }

    // –ü–æ–¥–ø–∏—Å—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Ç–µ–π —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    private fun signArtifact(
        unsignedArtifact: File,
        keystorePath: String,
        keystorePassword: String,
        keyAlias: String,
        keyPassword: String,
        projectPath: String
    ): CommandResult {
        val apksignerPath = findApksignerInAndroidSdk()
        val signedFile = File(
            unsignedArtifact.parentFile,
            unsignedArtifact.name.replace(".aab", "-signed.aab").replace(".apk", "-signed.apk")
        )

        return if (apksignerPath != null && signedFile.extension == "apk") {
            val cmd =
                "\"$apksignerPath\" sign --ks \"$keystorePath\" --ks-pass pass:\"$keystorePassword\" --key-pass pass:\"$keyPassword\" --out \"${signedFile.absolutePath}\" \"${unsignedArtifact.absolutePath}\""
            executeShellCommand(cmd, projectPath)
        } else {
            val cmd =
                "\"$JAVA_HOME_PATH/bin/jarsigner\" -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore \"$keystorePath\" -storepass \"$keystorePassword\" -keypass \"$keyPassword\" \"${unsignedArtifact.absolutePath}\" \"$keyAlias\""
            executeShellCommand(cmd, projectPath)
        }
    }

    // Shell command execution
    private fun executeShellCommand(
        command: String,
        workingDirectory: String? = null
    ): CommandResult {
        println("$AGENT_LOG_PREFIX –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: $command")
        workingDirectory?.let { println("$AGENT_LOG_PREFIX –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $it") }

        return try {
            val processBuilder = ProcessBuilder("bash", "-c", command)
                .directory(workingDirectory?.let { File(it) }
                    ?: File(System.getProperty("user.home")))

            setupJavaEnvironment(processBuilder)
            val process = processBuilder.start()

            val output = process.inputStream.bufferedReader().readText().trim()
            val error = process.errorStream.bufferedReader().readText().trim()
            val exitCode = process.waitFor()

            CommandResult(exitCode, output, error)
        } catch (e: Exception) {
            CommandResult(-1, "", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: ${e.message}")
        }
    }

    private fun setupJavaEnvironment(processBuilder: ProcessBuilder) {
        val env = processBuilder.environment()
        env["JAVA_HOME"] = JAVA_HOME_PATH
        env["PATH"] = "$JAVA_HOME_PATH/bin:${env["PATH"] ?: ""}"
        println("$AGENT_LOG_PREFIX JAVA_HOME —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $JAVA_HOME_PATH")
    }

    // Android tests
    private suspend fun runAndroidTests(
        projectPath: String,
        testType: String,
        moduleName: String? = null,
        buildVariant: String = "Debug"
    ): CommandResult {
        val validationError = validateAndroidProject(projectPath)
        if (validationError != null) return validationError

        val variant = buildVariant.lowercase()
        val modulePrefix = moduleName?.let { "$it:" } ?: ""
        val gradleCommand = buildGradleCommand(testType, modulePrefix, variant)

        logTestExecution(testType, projectPath, moduleName, buildVariant, gradleCommand)
        return executeShellCommand(gradleCommand, projectPath)
    }

    private fun validateAndroidProject(projectPath: String): CommandResult? {
        val projectDir = File(projectPath)
        if (!projectDir.exists() || !projectDir.isDirectory) {
            return CommandResult(-1, "", "–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ '$projectPath' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        }

        val buildGradleExists = File(projectPath, "build.gradle").exists() ||
                File(projectPath, "build.gradle.kts").exists()
        if (!buildGradleExists) {
            return CommandResult(
                -1,
                "",
                "–û—à–∏–±–∫–∞: –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '$projectPath' –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª build.gradle"
            )
        }

        val gradlewFile = File(projectPath, "gradlew")
        if (!gradlewFile.exists()) {
            return CommandResult(
                -1,
                "",
                "–û—à–∏–±–∫–∞: –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '$projectPath' –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª gradlew"
            )
        }

        val javaExecutable = File(JAVA_HOME_PATH, "bin/java")
        if (!javaExecutable.exists()) {
            return CommandResult(-1, "", "–û—à–∏–±–∫–∞: Java –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ $JAVA_HOME_PATH")
        }

        gradlewFile.setExecutable(true)
        println("$AGENT_LOG_PREFIX Java –Ω–∞–π–¥–µ–Ω–∞: $javaExecutable")
        return null
    }

    private fun buildGradleCommand(
        testType: String,
        modulePrefix: String,
        variant: String
    ): String {
        return when (testType) {
            "unit" -> "./gradlew ${modulePrefix}test${variant}UnitTest --console=plain"
            "instrumented" -> "./gradlew ${modulePrefix}connected${variant}AndroidTest --console=plain"
            else -> throw IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: $testType")
        }
    }

    private fun logTestExecution(
        testType: String,
        projectPath: String,
        moduleName: String?,
        buildVariant: String,
        command: String
    ) {
        println("$AGENT_LOG_PREFIX –ó–∞–ø—É—Å–∫–∞—é $testType —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: $projectPath")
        moduleName?.let { println("$AGENT_LOG_PREFIX –ú–æ–¥—É–ª—å: $it") }
        println("$AGENT_LOG_PREFIX –í–∞—Ä–∏–∞–Ω—Ç —Å–±–æ—Ä–∫–∏: $buildVariant")
        println("$AGENT_LOG_PREFIX –ö–æ–º–∞–Ω–¥–∞: $command")
    }

    // Response parsing helpers
    private fun isJsonCommand(response: String): Boolean {
        return try {
            Json.parseToJsonElement(response) is JsonObject
        } catch (e: Exception) {
            false
        }
    }

    private fun isToolCallFormat(response: String): Boolean {
        return response.trim().startsWith(TOOL_CALL_START_PREFIX)
    }

    private fun convertToolCallToJson(response: String): String {
        val lines = response.trim().lines().filter { it.isNotBlank() }
        if (lines.isEmpty()) return response

        val name = lines.first().removePrefix(TOOL_CALL_START_PREFIX).trim()
        val argsMap = mutableMapOf<String, String>()

        lines.drop(1).forEach { line ->
            val idx = line.indexOf('=')
            if (idx > 0) {
                val key = line.substring(0, idx).trim()
                val value = line.substring(idx + 1).trim()
                if (key.isNotEmpty()) argsMap[key] = value
            }
        }

        val argsJsonPairs = argsMap.entries.joinToString(",") { (k, v) ->
            "\"$k\":\"${v.replace("\\", "\\\\").replace("\"", "\\\"")}\""
        }

        return "{\"name\":\"$name\",\"arguments\":{$argsJsonPairs}}"
    }

    // Result formatting (–∫–∞–∫ –±—ã–ª–æ)
    private fun formatCommandResult(result: CommandResult, isTest: Boolean): String {
        return when {
            result.exitCode == 0 -> formatSuccessResult(result, isTest)
            result.exitCode > 0 -> formatWarningResult(result, isTest)
            else -> formatErrorResult(result, isTest)
        }
    }

    private fun formatSuccessResult(result: CommandResult, isTest: Boolean): String {
        val title =
            if (isTest) "‚úÖ **–¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!**" else "‚úÖ **–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**"
        val summary = if (isTest) extractTestSummary(result.stdout) else result.stdout.trim()

        return if (summary.isNotEmpty()) {
            "$title\n\n$summary"
        } else {
            "$title (–±–µ–∑ –≤—ã–≤–æ–¥–∞)"
        }
    }

    private fun formatWarningResult(result: CommandResult, isTest: Boolean): String {
        val title =
            if (isTest) "‚ö†Ô∏è **–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏**" else "‚ö†Ô∏è **–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏** (–∫–æ–¥: ${result.exitCode})"
        val errorInfo = analyzeErrors(result.stdout, result.stderr, isTest)
        return "$title\n\n$errorInfo"
    }

    private fun formatErrorResult(result: CommandResult, isTest: Boolean): String {
        val title =
            if (isTest) "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤**" else "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã** (–∫–æ–¥: ${result.exitCode})"
        val errorInfo = analyzeErrors(result.stdout, result.stderr, isTest)
        return "$title\n\n$errorInfo"
    }

    private fun extractTestSummary(output: String): String {
        val testKeywords =
            listOf("BUILD SUCCESSFUL", "Tests run:", "BUILD FAILED", "Test execution finished")
        val testResults = output.lines().filter { line ->
            testKeywords.any { keyword -> line.contains(keyword) }
        }

        return if (testResults.isNotEmpty()) {
            testResults.joinToString("\n")
        } else {
            "–¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: 0"
        }
    }

    private fun analyzeErrors(output: String, error: String, isTest: Boolean): String {
        val allText = "$output\n$error"

        val commonErrors = mapOf(
            "Unable to locate a Java Runtime" to ("–ù–µ –Ω–∞–π–¥–µ–Ω Java Runtime" to "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Android Studio —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ JAVA_HOME –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"),
            "BUILD FAILED" to ("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞" to "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–¥–∞, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gradle"),
            "Permission denied" to ("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ" to "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"),
            "Connection refused" to ("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏" to "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"),
            "command not found" to ("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" to "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø–∞–∫–µ—Ç"),
            "No such file or directory" to ("–§–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" to "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        )

        if (isTest && allText.contains("No tests found")) {
            return "**–ü—Ä–æ–±–ª–µ–º–∞:** –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n**–†–µ—à–µ–Ω–∏–µ:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å—Ç—å —Ñ–∞–π–ª—ã —Ç–µ—Å—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ test/"
        }

        for ((errorPattern, solution) in commonErrors) {
            if (allText.contains(errorPattern)) {
                return "**–ü—Ä–æ–±–ª–µ–º–∞:** ${solution.first}\n**–†–µ—à–µ–Ω–∏–µ:** ${solution.second}"
            }
        }

        val errorLines = error.lines().filter { it.isNotBlank() && it.length < 150 }
        return if (errorLines.isNotEmpty()) {
            "**–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:**\n${errorLines.take(3).joinToString("\n")}"
        } else {
            "**–ö–æ–¥ –æ—à–∏–±–∫–∏:** –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
        }
    }

    /**
     * –ò—â–µ—Ç –ø–µ—Ä–≤—É—é JSON-–æ–±—ä–µ–∫—Ç–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤ —Ç–µ–∫—Å—Ç–µ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏).
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—É: humanPart (—Ç–µ–∫—Å—Ç –±–µ–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ JSON) –∏ jsonPart (—Å—Ç—Ä–æ–∫–∞ JSON) ‚Äî –ª–∏–±–æ jsonPart==null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
     */
    private fun extractFirstJsonObject(text: String): Pair<String?, String?> {
        val start = text.indexOf('{')
        if (start == -1) return Pair(text.trim().ifEmpty { null }, null)

        var depth = 0
        var i = start
        while (i < text.length) {
            when (text[i]) {
                '{' -> depth++
                '}' -> {
                    depth--
                    if (depth == 0) {
                        val json = text.substring(start, i + 1).trim()
                        // human = –≤—Å—ë, —á—Ç–æ –¥–æ JSON + –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ JSON (–±–µ–∑ JSON)
                        val before = text.substring(0, start).trim()
                        val after = if (i + 1 < text.length) text.substring(i + 1).trim() else ""
                        val human =
                            listOf(before, after).filter { it.isNotEmpty() }.joinToString("\n")
                                .ifEmpty { null }
                        return Pair(human, json)
                    }
                }
            }
            i++
        }
        // –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º —á—Ç–æ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω
        return Pair(text.trim().ifEmpty { null }, null)
    }

    private fun summarizeForUser(result: CommandResult, isTest: Boolean): String {
        return if (result.exitCode == 0) {
            if (isTest) {
                "‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"
            } else {
                "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
            }
        } else {
            val brief = analyzeErrors(result.stdout, result.stderr, isTest)
            "‚ùå –û—à–∏–±–∫–∞: $brief"
        }
    }

    /**
     * publish_to_rustore: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç unit —Ç–µ—Å—Ç—ã, –∞ –∑–∞—Ç–µ–º –ø—É–±–ª–∏–∫—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ RuStore
     */
    private suspend fun handlePublishToRustore(arguments: JsonObject) {
        val projectPath = arguments["projectPath"]?.jsonPrimitive?.content
            ?: run {
                addMessage(
                    MessageInfo(
                        Roles.ASSISTANT,
                        "‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'projectPath' –≤ –∫–æ–º–∞–Ω–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞."
                    )
                )
                return
            }

        val moduleName = arguments["moduleName"]?.jsonPrimitive?.content ?: "app"
        val buildVariant = arguments["buildVariant"]?.jsonPrimitive?.content ?: "Release"
        val artifactType = arguments["artifactType"]?.jsonPrimitive?.content ?: "apk"

        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        addMessage(
            MessageInfo(
                Roles.ASSISTANT,
                "üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ RuStore..."
            )
        )
        delay(500) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        _publishProgress.value = "–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤..."
        delay(300) // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI

        try {
            // –®–∞–≥ 1: –ó–∞–ø—É—Å–∫–∞–µ–º unit —Ç–µ—Å—Ç—ã
            addMessage(MessageInfo(Roles.ASSISTANT, "üìã –®–∞–≥ 1/3: –ó–∞–ø—É—Å–∫–∞—é unit —Ç–µ—Å—Ç—ã..."))
            delay(200) // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

            val unitTestResult = runAndroidTests(projectPath, "unit", moduleName, buildVariant)
            hiddenHistory.add(
                MessageInfo(
                    Roles.ASSISTANT,
                    "**[UNIT_TESTS]** exit=${unitTestResult.exitCode}\n${unitTestResult.stdout}\n${unitTestResult.stderr}"
                )
            )

            if (unitTestResult.exitCode != 0) {
                addMessage(
                    MessageInfo(
                        Roles.ASSISTANT,
                        "‚ùå Unit —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n\n${
                            analyzeErrors(
                                unitTestResult.stdout,
                                unitTestResult.stderr,
                                true
                            )
                        }"
                    )
                )
                _publishProgress.value = null
                return
            }
            addMessage(MessageInfo(Roles.ASSISTANT, "‚úÖ Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"))
            delay(300) // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

            // –®–∞–≥ 2: –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–ª–∏–∑–Ω—É—é –≤–µ—Ä—Å–∏—é
            _publishProgress.value = "–°–±–æ—Ä–∫–∞ —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ä—Å–∏–∏..."
            delay(200) // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI

            addMessage(MessageInfo(Roles.ASSISTANT, "üìã –®–∞–≥ 2/3: –°–æ–±–∏—Ä–∞—é —Ä–µ–ª–∏–∑–Ω—É—é –≤–µ—Ä—Å–∏—é..."))
            delay(200) // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

            val modulePrefix = if (moduleName.isNotBlank()) "$moduleName:" else ""
            val assembleTask = "assemble${buildVariant.replaceFirstChar { it.uppercase() }}"
            val gradleCommand = "./gradlew ${modulePrefix}$assembleTask --quiet"
            val buildResult = executeShellCommand(gradleCommand, projectPath)

            hiddenHistory.add(
                MessageInfo(
                    Roles.ASSISTANT,
                    "**[BUILD]** cmd=$gradleCommand\nexit=${buildResult.exitCode}\n${buildResult.stdout}\n${buildResult.stderr}"
                )
            )

            if (buildResult.exitCode != 0) {
                addMessage(
                    MessageInfo(
                        Roles.ASSISTANT,
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ —Ä–µ–ª–∏–∑–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n\n${
                            analyzeErrors(
                                buildResult.stdout,
                                buildResult.stderr,
                                false
                            )
                        }"
                    )
                )
                _publishProgress.value = null
                return
            }
            addMessage(MessageInfo(Roles.ASSISTANT, "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"))
            delay(300) // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

            // –®–∞–≥ 3: –ü—É–±–ª–∏–∫—É–µ–º –≤ RuStore
            _publishProgress.value = "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ RuStore..."
            delay(200) // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI

            addMessage(MessageInfo(Roles.ASSISTANT, "üìã –®–∞–≥ 3/3: –ü—É–±–ª–∏–∫—É—é –≤ RuStore..."))
            delay(200) // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            val publishArguments = JsonObject(
                mapOf(
                    "projectPath" to kotlinx.serialization.json.JsonPrimitive(projectPath),
                    "moduleName" to kotlinx.serialization.json.JsonPrimitive(moduleName),
                    "buildVariant" to kotlinx.serialization.json.JsonPrimitive(buildVariant),
                    "artifactType" to kotlinx.serialization.json.JsonPrimitive(artifactType)
                )
            )

            // –í—ã–∑—ã–≤–∞–µ–º handlePublishApp –±–µ–∑ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            val publishSuccess = handlePublishAppInternal(publishArguments)

            if (publishSuccess) {
                delay(200) // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                addMessage(MessageInfo(Roles.ASSISTANT, "üéâ –ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!"))
            } else {
                addMessage(
                    MessageInfo(
                        Roles.ASSISTANT,
                        "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏."
                    )
                )
            }

        } catch (e: Exception) {
            _publishProgress.value = null
            addMessage(MessageInfo(Roles.ASSISTANT, "‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${e.message}"))
        }
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–µ—Ä—Å–∏—è handlePublishApp –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ publish_to_rustore)
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, false –µ—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏
     */
    private suspend fun handlePublishAppInternal(arguments: JsonObject): Boolean {
        val projectPath = arguments["projectPath"]?.jsonPrimitive?.content
            ?: throw IllegalArgumentException("Missing projectPath")

        val moduleName = arguments["moduleName"]?.jsonPrimitive?.content ?: "app"
        val buildVariant = arguments["buildVariant"]?.jsonPrimitive?.content ?: "Release"
        val artifactType = arguments["artifactType"]?.jsonPrimitive?.content ?: "apk"

        // –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ env
        val keystorePath = getSecret("KEYSTORE_PATH")
        val keystorePassword = getSecret("KEYSTORE_PASSWORD")
        val keyAlias = getSecret("KEY_ALIAS")
        val keyPassword = getSecret("KEY_PASSWORD")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        val missing = mutableListOf<String>()
        if (keystorePath.isNullOrBlank()) missing.add("KEYSTORE_PATH")
        if (keystorePassword.isNullOrBlank()) missing.add("KEYSTORE_PASSWORD")
        if (keyAlias.isNullOrBlank()) missing.add("KEY_ALIAS")
        if (keyPassword.isNullOrBlank()) missing.add("KEY_PASSWORD")

        if (missing.isNotEmpty()) {
            val list = missing.joinToString(", ")
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚ùó –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: $list. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env"
                )
            )
            return false
        }

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        val unsignedArtifact =
            findUnsignedArtifact(projectPath, moduleName, buildVariant, artifactType)
        if (unsignedArtifact == null) {
            addMessage(MessageInfo(Roles.ASSISTANT, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏."))
            return false
        }

        addMessage(MessageInfo(Roles.ASSISTANT, "üîê –ü–æ–¥–ø–∏—Å—ã–≤–∞—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç..."))
        delay(200) // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

        val signResult = signArtifact(
            unsignedArtifact,
            keystorePath!!,
            keystorePassword!!,
            keyAlias!!,
            keyPassword!!,
            projectPath
        )
        val signedFile = File(
            unsignedArtifact.parentFile,
            unsignedArtifact.name.replace(".aab", "-signed.aab").replace(".apk", "-signed.apk")
        )

        hiddenHistory.add(
            MessageInfo(
                Roles.ASSISTANT,
                "**[SIGN]** exit=${signResult.exitCode}\n${signResult.stdout}\n${signResult.stderr}"
            )
        )

        if (signResult.stderr.isNotEmpty()) {
            addMessage(MessageInfo(Roles.ASSISTANT, "üîç –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏: ${signResult.stderr}"))
        }

        if (signResult.exitCode != 0) {
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏/–ø–∞—Ä–æ–ª–∏."
                )
            )
            return false
        }
        addMessage(MessageInfo(Roles.ASSISTANT, "‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ–¥–ø–∏—Å–∞–Ω."))
        delay(300) // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ RuStore
        val artifactToUpload = if (signedFile.exists()) signedFile else unsignedArtifact

        addMessage(MessageInfo(Roles.ASSISTANT, "üì§ –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ RuStore..."))
        delay(200) // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ RuStore API (–¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç)
        val rustoreToken = try {
            val tokenGenerator = RuStoreTokenGenerator()
            val accessToken = tokenGenerator.getAccessToken()
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "üîê –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ RuStore –ø–æ–ª—É—á–µ–Ω (–¥–µ–π—Å—Ç–≤—É–µ—Ç ${accessToken.ttl} —Å–µ–∫—É–Ω–¥)"
                )
            )
            accessToken.jwe
        } catch (e: Exception) {
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ RuStore: ${e.message}"
                )
            )
            return false
        }

        val uploadCommand = """
            curl -s -X POST "https://public-api.rustore.ru/v1/application/upload" \
            -H "Authorization: Bearer $rustoreToken" \
            -F "file=@${artifactToUpload.absolutePath}"
        """.trimIndent()

        val uploadResult = executeShellCommand(uploadCommand, projectPath)

        hiddenHistory.add(
            MessageInfo(
                Roles.ASSISTANT,
                "**[UPLOAD]** exit=${uploadResult.exitCode}\n${uploadResult.stdout}\n${uploadResult.stderr}"
            )
        )

        if (uploadResult.exitCode == 0) {
            addMessage(MessageInfo(Roles.ASSISTANT, "üéâ APK —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!"))
            sendMessagesLLM(
                MessageInfo(
                    Roles.USER,
                    "üîß –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ RuStore. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 'publish_version' —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏. –í–æ—Ç RUSTORE_PUBLIC_TOKEN $rustoreToken"
                )
            )
            _publishProgress.value = "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞"
            return true
        } else {
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ RuStore. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ —Å–µ—Ç—å."
                )
            )
            return false
        }
    }

    /**
     * generate_rustore_token: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è RuStore API
     */
    private suspend fun handleGenerateRuStoreToken(arguments: JsonObject) {
        try {
            addMessage(MessageInfo(Roles.ASSISTANT, "üîê –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è RuStore..."))

            val tokenGenerator = RuStoreTokenGenerator()

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (–¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç)
            val accessToken = tokenGenerator.getAccessToken()

            // –¢–∞–∫–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            val authToken = tokenGenerator.generateToken()
            val authTokenJson = tokenGenerator.generateTokenJson()

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–∞–π–ª –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            val tokenData = mapOf(
                "access_token" to accessToken.jwe,
                "access_token_ttl" to accessToken.ttl,
                "auth_token" to authTokenJson,
                "timestamp" to System.currentTimeMillis()
            )

            val tokenFile = File("rustore_tokens.json")
            tokenFile.writeText(Json.encodeToString(tokenData), Charsets.UTF_8)

            addMessage(MessageInfo(Roles.ASSISTANT, "‚úÖ –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ RuStore —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!"))
            addMessage(MessageInfo(Roles.ASSISTANT, "üìã ID –∫–ª—é—á–∞: ${authToken.keyId}"))
            addMessage(MessageInfo(Roles.ASSISTANT, "‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: ${authToken.timestamp}"))
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "üîë –ü–æ–¥–ø–∏—Å—å: ${authToken.signature.take(50)}..."
                )
            )
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "üé´ –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞: ${accessToken.jwe.take(50)}..."
                )
            )
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "‚è±Ô∏è –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: ${accessToken.ttl} —Å–µ–∫—É–Ω–¥ (${accessToken.ttl / 60} –º–∏–Ω—É—Ç)"
                )
            )
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "üíæ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: rustore_tokens.json"
                )
            )

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ hiddenHistory –¥–ª—è LLM
            hiddenHistory.add(
                MessageInfo(
                    Roles.ASSISTANT,
                    "**[RUSTORE_ACCESS_TOKEN]** ${accessToken.jwe}"
                )
            )

        } catch (e: Exception) {
            val errorMessage = when {
                e.message?.contains("RUSTORE_PRIVATE_KEY") == true ->
                    "‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RUSTORE_PRIVATE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–î–ª—è —Ä–µ—à–µ–Ω–∏—è:\n1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞\n2. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ: RUSTORE_PRIVATE_KEY=–≤–∞—à_–ø—Ä–∏–≤–∞—Ç–Ω—ã–π_–∫–ª—é—á_–≤_base64"

                e.message?.contains("–ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞") == true ->
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ${e.message}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π RUSTORE_PRIVATE_KEY"

                e.message?.contains("–ø–æ–¥–ø–∏—Å–∏") == true ->
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏: ${e.message}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"

                e.message?.contains("—Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞") == true ->
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞: ${e.message}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"

                else ->
                    "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${e.message}"
            }

            addMessage(MessageInfo(Roles.ASSISTANT, errorMessage))
        }
    }

    /**
     * test_rustore_api: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RuStore API
     */
    private suspend fun handleTestRuStoreApi(arguments: JsonObject) {
        try {
            addMessage(MessageInfo(Roles.ASSISTANT, "üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RuStore API..."))

            val tokenGenerator = RuStoreTokenGenerator()

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ç–µ—Å—Ç–∞
            val authToken = tokenGenerator.generateToken()
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "üîê –ü–æ–¥–ø–∏—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: ${authToken.signature.take(30)}..."
                )
            )

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint
            addMessage(
                MessageInfo(
                    Roles.ASSISTANT,
                    "üåê –¢–µ—Å—Ç–∏—Ä—É—é endpoint: https://public-api.rustore.ru/v1/public/auth"
                )
            )

            try {
                val accessToken = tokenGenerator.getAccessToken()
                addMessage(MessageInfo(Roles.ASSISTANT, "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—É—á–µ–Ω."))
                addMessage(MessageInfo(Roles.ASSISTANT, "üé´ –¢–æ–∫–µ–Ω: ${accessToken.jwe.take(50)}..."))
                addMessage(
                    MessageInfo(
                        Roles.ASSISTANT,
                        "‚è±Ô∏è –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: ${accessToken.ttl} —Å–µ–∫—É–Ω–¥"
                    )
                )
            } catch (e: Exception) {
                addMessage(MessageInfo(Roles.ASSISTANT, "‚ùå –û—à–∏–±–∫–∞ API: ${e.message}"))

                // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
                addMessage(MessageInfo(Roles.ASSISTANT, "üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint..."))

                val alternativeUrl = "https://public-api.rustore.ru/api/v1/auth"
                addMessage(MessageInfo(Roles.ASSISTANT, "üåê –¢–µ—Å—Ç–∏—Ä—É—é: $alternativeUrl"))

                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ endpoint
            }

        } catch (e: Exception) {
            addMessage(MessageInfo(Roles.ASSISTANT, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ${e.message}"))
        }
    }
}